'''
문제
시내 주차장은 1부터 N까지 번호가 매겨진 N개의 주차 공간을 가지고 있다. 
이 주차장은 매일 아침 모든 주차 공간이 비어 있는 상태에서 영업을 시작하며, 하룻동안 다음과 같은 방식으로 운영된다. 
차가 주차장에 도착하면, 주차장 관리인이 비어있는 주차 공간이 있는지를 검사한다. 
만일 비어있는 공간이 없으면, 차량을 빈 공간이 생길 때까지 입구에서 기다리게 한다. 
만일 빈 주차 공간이 하나만 있거나 또는 빈 주차 공간이 없다가 한 대의 차량이 주차장을 떠나면 곧바로 그 장소에 주차를 하게 한다. 
만일 빈 주차 공간이 여러 곳이 있으면, 그 중 번호가 가장 작은 주차 공간에 주차하도록 한다. 
만일 주차장에 여러 대의 차량이 도착하면, 일단 도착한 순서대로 입구의 대기장소에서 줄을 서서 기다려야 한다. 
대기장소는 큐(queue)와 같이, 먼저 대기한 차량부터 주차한다.

주차료는 주차한 시간이 아닌 차량의 무게에 비례하는 방식으로 책정된다. 
주차료는 차랑의 무게에다 주차 공간마다 따로 책정된 단위 무게당 요금을 곱한 가격이다.

주차장 관리원은 오늘 M대의 차량이 주차장을 이용할 것이라는 것을 알고 있다. 또한, 차량들이 들어오고 나가는 순서도 알고 있다.

주차 공간별 요금과 차량들의 무게와 출입 순서가 주어질 때, 오늘 하룻동안 주차장이 벌어들일 총 수입을 계산하는 프로그램을 작성하라.

입력
반드시 표준 입력으로부터 다음의 데이터를 읽어야 한다.

첫 번째 줄에는 정수 N과 M이 빈칸을 사이에 두고 주어진다.
그 다음 N개의 줄에는 주차 공간들의 단위 무게당 요금을 나타내는 정수들이 주어진다. 
그 중 s번째 줄에는 주차 공간 s의 단위 무게당 요금 Rs가 들어있다.
그 다음 M개의 줄에는 차량들의 무게를 나타내는 정수들이 주어진다. 차량들은 1 부터 M 까지 번호로 구분되고, 
이 번호는 출입 순서와는 상관없다. 이 M개의 줄 중 k번째 줄에는 차량 k의 무게를 나타내는 정수 Wk가 들어있다.
그 다음 2*M 개의 줄에는 차량들의 주차장 출입 순서를 나타내는 정수들이 한 줄에 하나씩 주어진다. 
양의 정수 i는 차량 i가 주차장에 들어오는 것을 의미하고, 음의 정수 -i는 차량 i가 주차장에서 나가는 것을 의미한다. 
주차장에 들어오지 않은 차량이 주차장에서 나가는 경우는 없다. 
1 번부터 M 번까지 모든 차량은 정확하게 한 번씩 주차장에 들어오고, 한 번씩 주차장에서 나간다. 
또한 입구에서 대기 중인 차량이 주차를 하지 못하고 나가는 경우는 없다.
1 ≤ N ≤ 100 주차 공간의 수
1 ≤ M ≤ 2,000 차량의 수
1 ≤ Rs ≤ 100 주차 공간 s의 단위 무게당 요금
1 ≤ Wk ≤ 10,000 차량 k의 무게
출력
출력은 반드시 표준 출력으로 하여야 하며, 하나의 줄에 한 개의 정수를 출력한다. 이 정수는 오늘 하룻동안 주차장이 벌어들인 총 수입이다.

'''

# 차가 주차장에 도착하면 -> 비어있는 주차공간이 있는지를 검사.
# 빈 공간 없으면? 기다린다.
# 빈 주차공간이 하나만 있거나 또한 빈 주차 공간이 없다가 한 대의 차량이 주차장을 떠나면 바로 그 장소에 주차
# 빈 주차 공간이 여러곳 있다면? 번호가 가장 작은 주차 공간에 주차. 
# 주차장에 여러대의 차랑이 도착? -> 도착한 순서대로 대기장소에 줄을 서서 기다림. 대기장소는 큐.


# 주차료는 차량의 무게에 비례 ->   주차료 = 차량 무게 * 주차 공간마다 따로 책정된 단위 무게당 요금
# M: 오늘 주차장을 이용하는 차량 댓수.
# N : 주차 공간 수
# M 대의 차량 무게가 각각 주어짐
# N 개의 주차 공간에 대한 단위 무게당 요금이 각각 주어짐.
# 총 수입 구하는 문제




# 접근 : 차량이 주차되어 있는가 주차되어 있지 않을가를 리스트로 저장하여(주차 되어있다면 1, 비어있다면 0) 확인함.
# 근데 이게 BFS인가? 그냥 큐만 이용하는건데...


N, M = map(int, input().split())
# 각 주차 공간에 대한 요금
pay = [int(input()) for _ in range(N)]
# 차의 무게들. 인덱스 맞춰줄라고 앞에 0 추가.
weight = [0] + [int(input()) for _ in range(M)]
# 현재 주차장 주차 상황. N개의 주차공간에 대해 1이면 차있는 상황, 0이면 비어있는 상황으로 생각.
state = [0] * N
# 주차 대기열
q = []
# 주차되면 {차 : 주차공간}의 형태로 표현할 딕셔너리
temp = {}
# 출력할 전체 요금
total_pay = 0
for i in range(2*M):
    x = int(input())
    # 음수라면, 주차되어 있는 차를 빼기
    if x < 0:
        # 금액 합계에 출차하는 차에 대한 단위 요금 * 무게 만큼 더해주고
        total_pay += pay[temp.get(-x)] * weight[-x]
        # 주차 공간의 상태를 비어있는(0)으로 만듬
        state[temp.get(-x)] = 0
        # 차가 빠졌는데, 대기중인 차가 있으면?
        if q:
            # 그 차를 주차 공간에 넣고, 그 주차 공간의 상태를 1로 바꿈
            temp[q.pop(0)] = temp.get(-x)
            state[temp.get(-x)] = 1
    else:
        # 먼저 주차 대기열에 넣기
        q.append(x)
        # 빈 자리 찾아서 넣기
        for i in range(N):
            if state[i] == 0:
                y = q.pop(0)
                state[i] = 1
                temp[y] = i
                break
print(total_pay)

# a = {}
# a[8] = 1
# a[3] = 2
# print(a)